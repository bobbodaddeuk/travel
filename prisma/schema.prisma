// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId       Int      @id @unique @default(autoincrement())
  username     String   @unique
  nickname     String
  email        String   @unique
  age          Int?
  introduction String?
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  posts    Posts[]
  comments Comments[]
  rfTokens RefreshToken?
  likes    Likes[]
}

model RefreshToken {
  refTokenId Int    @id @default(autoincrement())
  userId     Int    @unique
  refToken   String @db.Text

  users Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Posts {
  postId    Int      @id @default(autoincrement())
  userId    Int
  title     String
  author    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  comments Comments[]
  photos   Photos[]
  users    Users      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  likes    Likes[]
}

model Comments {
  commentId Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  users Users   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  posts Posts   @relation(fields: [postId], references: [postId], onDelete: Cascade)
  likes Likes[]
}

model Photos {
  photoId Int    @id @default(autoincrement())
  postId  Int
  photo   String @db.Text

  posts Posts @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model Likes {
  likeId     Int  @id @default(autoincrement())
  userId     Int
  postId     Int
  commentId  Int
  likesCount Int?

  users    Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  posts    Posts    @relation(fields: [postId], references: [postId], onDelete: Cascade)
  comments Comments @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
}
